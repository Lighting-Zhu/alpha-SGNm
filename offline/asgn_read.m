function [x,varargout] = asgn_read(fpath,samps,varargin)

% ******** Inputs *********
% fpath: is the absolute path string leading to the folder holding the asgn
%        data files generated by 'asgn_write()'
%
% samps: 'samps' is the number of noise samples required and should be
%        less than the total number of samples held in the data files.
%
% (pos, file_num):  queries for 'samps' noise samples starting from
%                   the index 'pos+1' in file number 'file_num'. Do note
%                   that 'pos' and 'file_num' are postive integers that are
%                   within 0:1:samps_per_file-1 and 1:1:TotalFiles,
%                   respectively.
%
%
% ******** Outputs *********
%         x       : noise samples.
%
% [x,pos,file_num]: 'pos' and 'file number' are optional outputs
%                   highlighting the pointer position and file number,
%                   respectively, after reading 'x', i.e., 'pos' points
%                   towards the sample located right after 'x(end)' in the
%                   'file_num'.  Use '~' to skip any output.
%
%---------------------------------------
%
% The aSGN files generated by asgn_write() are stored in a sub-directoy
% within this function's path. As an example, if asgn_write() computes a
% realization for alpha=1.57 and m=4, the files are saved in '\a1_57__m_4\'
% and are labelled as 'asgn_1.bin', 'asgn_2.bin' and so on. To read this
% data, simply input the absolute path of this directory as a string to
% 'fpath'.
%
% Note that asgn_read(fpath, samps) uses persistent variables. Thus, every
% time it is called, it extracts the next 'samps' samples from the
% corresponding data file. When this exhausts, it goes on to the next data
% file, i.e., from 'asgn_1.bin' to 'asgn_2.bin' and so on. This keeps on
% going until all the data is exhausted. To reset the seed, i.e., the
% pointer and file to default starting position, use the command
% asgn_read(samps,0,1).
%
% Example: assume a scenario where 1000 aSGN(m) samples are required in
% every iteration of a loop iterating over j. Then the following script
% allows generating a continuous stream of noise samples, i.e., the samples
% read at j=2 are an ordered continuation of the samples read at j=1 and so
% on:
%
% for j=1:N
%   if j==1
%       noise =asgn_read(fpath,1000,0,1);
%   else
%       noise =asgn_read(fpath,1000);
%   end
% end
%
% The above is equivalent to:
%
% for j=1:N
%   if j==1
%       [noise,ind,fil] =asgn_read(fpath,1000,0,1);
%   else
%       [noise,ind,fil] =asgn_read(fpath,1000,ind,fil);
%   end
% end

%------------------------
% Author: Ahmed Mahmood
% Year: 2015

persistent pos file_num fpath_prev TotalFiles samps_per_file

if length(varargin)~=2 && isempty(varargin)==0
    error('Number of input paramters is incorrect: use either (samps) or (samps,pos,file_num)')
end

if ~strcmp(fpath_prev,fpath)
    dirfiles=dir(fpath);
    dfiles = {dirfiles.name};
    TotalFiles = sum(contains(dfiles,'asgn_'));
    dsel=dirfiles(contains(dfiles,'asgn_1.bin'));
    samps_per_file=(dsel.bytes)/8;
    fpath_prev=fpath;
end
if ~isempty(varargin)
    pos=varargin{1};
    if pos>samps_per_file
        error('An invalid pos has been set: pos should be within 0:1:samps_per_file-1')
    end
    file_num= varargin{2};
elseif isempty(pos) || isempty(file_num)
    pos=0;
    file_num=1;
end

if file_num>TotalFiles
    error('aSGN(m) data exhausted');
end

if samps/samps_per_file>1
    if samps>samps_per_file*(TotalFiles-file_num)+samps_per_file-pos
        error('aSGN(m) data exhausted: Either increase the size of the data files or reduce the number of requested samples');
    else
        fid=fopen([fpath,'\asgn_',num2str(file_num),'.bin']);
        fseek(fid,pos*8,'bof');
        x=fread(fid,samps_per_file-pos,'double');
        fclose(fid);
        file_num=file_num+1;
        floor((samps-length(x))/samps_per_file)
        for i=1:floor((samps-length(x))/samps_per_file)
            fid=fopen([fpath,'\asgn_',num2str(file_num),'.bin']);
            fseek(fid,0,'bof');
            x=[x; fread(fid,samps_per_file,'double')];
            fclose(fid);
            file_num=file_num+1;
        end
        fid=fopen([fpath,'\asgn_',num2str(file_num),'.bin']);
        fseek(fid,0,'bof');
        x=[x; fread(fid,samps-length(x),'double')];
        pos=ftell(fid)/8;
        fclose(fid);   
    end
    
else
    fid=fopen([fpath,'\asgn_',num2str(file_num),'.bin']);
    fseek(fid,pos*8,'bof');
    x=fread(fid,samps,'double');
    fclose(fid);
    
    if pos+samps < samps_per_file
        pos=pos+samps;
    else
        file_num=file_num+1;
        if file_num>TotalFiles
            error('aSGN(m) data exhausted')
        else
            fid=fopen([fpath,'\asgn_',num2str(file_num),'.bin']);
            x=[x; fread(fid,samps-length(x),'double')];
            pos=ftell(fid)/8;
            fclose(fid);
        end
    end
end
varargout{1}=pos;
varargout{2}=file_num;
end